#include <SPI.h>
#include <Adafruit_GFX.h>
#include <TFT_ILI9163C.h>
#include <SoftwareSerial.h>
SoftwareSerial Serial1(8, 7); // serial ports RX, TX
// input byte variables
int inputHigh = 0;
int inputLow = 0;
// variable to caclulate checksum input variables
uint16_t inputChecksum = 0;
// sensor variables
uint16_t concPM1_0_CF1;
uint16_t concPM2_5_CF1;
uint16_t concPM10_0_CF1;
uint16_t concPM1_0_amb;
uint16_t concPM2_5_amb;
uint16_t concPM10_0_amb;
uint16_t rawGt0_3um;
uint16_t rawGt0_5um;
uint16_t rawGt1_0um;
uint16_t rawGt2_5um;
uint16_t rawGt5_0um;
uint16_t rawGt10_0um;
uint8_t version;
uint8_t errorCode;
uint16_t checksum;
// All wiring required, only 3 defines for hardware SPI on 328P
#define __DC 9
#define __CS 10
// MOSI --> (SDA) --> D11
#define __RST 12
// SCLK --> (SCK) --> D13

// Color definitions
#define  BLACK   0x0000
#define BLUE    0x001F
#define RED     0xF800
#define GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF
int PMA ;
int prevPMA ;
int lcdStatus = 0;
int prevStatus = 0; // 0->good(1digit)  1-> good(2digits)  2->moderate(2digits)   3->bad(3digits) 4->veryBad(3digits)
TFT_ILI9163C tft = TFT_ILI9163C(__CS, __DC, __RST);


//**************************************************//
//**************************************************//
//*******************Setup Func*********************//
//**************************************************//
//**************************************************//
void setup() {
  tft.begin();
  Serial.begin(9600);
  while (!Serial) {
  }
  Serial.println("Serial port ready");
  Serial1.begin(9600);
  while (!Serial1) {
  }
  while (Serial1.read() != -1) {}; //clear buffer
  Serial.println("Sensor port ready");
  delay(300);
  tft.setCursor(33, 5);
  tft.setTextSize(2);
  tft.setTextColor(WHITE);
  tft.println("PM2.5");

}

//**************************************************//
//**************************************************//
//*******************Endless loop*******************//
//**************************************************//
//**************************************************//
void loop() {

  if (pms7003ReadData()) {
    if (prevPMA != PMA) {
      ShowValues(PMA);
      Serial.print("now " + lcdStatus);
      Serial.println(" prev=" + prevStatus);
      prevStatus = lcdStatus;
      prevPMA = PMA ;
    }
  }
  delay(300);
}


//**************************************************//
//**************************************************//
//*******************PM2.5 Readings*****************//
//**************************************************//
//**************************************************//
bool pms7003ReadData() {
  // while (Serial1.read()!=-1) {}; //clear buffer
  if (Serial1.available() < 32) {
    if (Serial1.available() == 0) {
      delay(150);
      return false;
    };
    if (Serial1.available() > 16) {
      delay(10);
      return false;
    };
    if (Serial1.available() > 0) {
      delay(30);
      return false;
    };
    delay(100);
    return false;
  }
  if (Serial1.read() != 0x42) return false;
  if (Serial1.read() != 0x4D) return false;
  inputChecksum = 0x42 + 0x4D;
  inputHigh = Serial1.read();
  inputLow = Serial1.read();
  inputChecksum += inputHigh + inputLow;
  if (inputHigh != 0x00) return false;
  if (inputLow != 0x1c) return false;
  inputHigh = Serial1.read();
  inputLow = Serial1.read();
  inputChecksum += inputHigh + inputLow;
  concPM1_0_CF1 = inputLow + (inputHigh << 8);
  inputHigh = Serial1.read();
  inputLow = Serial1.read();
  inputChecksum += inputHigh + inputLow;
  concPM2_5_CF1 = inputLow + (inputHigh << 8);
  inputHigh = Serial1.read();
  inputLow = Serial1.read();
  inputChecksum += inputHigh + inputLow;
  concPM10_0_CF1 = inputLow + (inputHigh << 8);
  inputHigh = Serial1.read();
  inputLow = Serial1.read();
  inputChecksum += inputHigh + inputLow;
  concPM1_0_amb = inputLow + (inputHigh << 8);
  inputHigh = Serial1.read();
  inputLow = Serial1.read();
  inputChecksum += inputHigh + inputLow;
  concPM2_5_amb = inputLow + (inputHigh << 8);
  inputHigh = Serial1.read();
  inputLow = Serial1.read();
  inputChecksum += inputHigh + inputLow;
  concPM10_0_amb = inputLow + (inputHigh << 8);
  inputHigh = Serial1.read();
  inputLow = Serial1.read();
  inputChecksum += inputHigh + inputLow;
  rawGt0_3um = inputLow + (inputHigh << 8);
  inputHigh = Serial1.read();
  inputLow = Serial1.read();
  inputChecksum += inputHigh + inputLow;
  rawGt0_5um = inputLow + (inputHigh << 8);
  inputHigh = Serial1.read();
  inputLow = Serial1.read();
  inputChecksum += inputHigh + inputLow;
  rawGt1_0um = inputLow + (inputHigh << 8);
  inputHigh = Serial1.read();
  inputLow = Serial1.read();
  inputChecksum += inputHigh + inputLow;
  rawGt2_5um = inputLow + (inputHigh << 8);
  inputHigh = Serial1.read();
  inputLow = Serial1.read();
  inputChecksum += inputHigh + inputLow;
  rawGt5_0um = inputLow + (inputHigh << 8);
  inputHigh = Serial1.read();
  inputLow = Serial1.read();
  inputChecksum += inputHigh + inputLow;
  rawGt10_0um = inputLow + (inputHigh << 8);
  inputLow = Serial1.read();
  inputChecksum += inputLow;
  version = inputLow;
  inputLow = Serial1.read();
  inputChecksum += inputLow;
  errorCode = inputLow;
  Serial.print("PMS7003;");
  Serial.print(concPM1_0_CF1);
  Serial.print(';');
  Serial.print(concPM2_5_CF1);
  Serial.print(';');
  Serial.print(concPM10_0_CF1);
  Serial.print(';');
  Serial.print(concPM1_0_amb);
  Serial.print(';');
  Serial.print(concPM2_5_amb);
  Serial.print(';');
  Serial.print(concPM10_0_amb);
  Serial.print(';');
  Serial.print(rawGt0_3um);
  Serial.print(';');
  Serial.print(rawGt0_5um);
  Serial.print(';');
  Serial.print(rawGt1_0um);
  Serial.print(';');
  Serial.print(rawGt2_5um);
  Serial.print(';');
  Serial.print(rawGt5_0um);
  Serial.print(';');
  Serial.print(rawGt10_0um);
  Serial.print(';');
  Serial.print(version);
  Serial.print(';');
  Serial.print(errorCode);
  inputHigh = Serial1.read();
  inputLow = Serial1.read();
  checksum = inputLow + (inputHigh << 8);
  if (checksum != inputChecksum) {
    Serial.print(';');
    Serial.print(checksum);
    Serial.print(';');
    Serial.print(inputChecksum);
  }
  Serial.print('\n');
  PMA = concPM2_5_amb;
  delay(200); // higher will get you checksum errors
  return true;
}


//Show Value
void ShowValues(int PMA) {

  // tft.fillRect(0, 30, 128,128, BLACK);
  tft.println();
  //  tft.drawChar('a');
  tft.setTextSize(5);
  tft.setCursor(20, 48);

  if (PMA >= 0 && PMA <= 9) {
    lcdStatus = 0 ;
    if (lcdStatus != prevStatus) {
      tft.fillRect(0, 30, 128, 128, BLACK);
      prevStatus = lcdStatus;
    }
    tft.setTextColor(GREEN, BLACK);
    tft.setCursor(37, 50);
    tft.println(PMA);
    tft.setTextSize(1);
    tft.setCursor(95, 85);
    tft.print("ug/m");
    tft.setTextSize(1);
    tft.setCursor(120, 80);
    tft.print("3");
    tft.setTextSize(2);
    tft.setCursor(20, 98);
    tft.println("Healthy");

  }
  else if (PMA >= 10 && PMA <= 50) {
    lcdStatus = 1 ;
    if (lcdStatus != prevStatus) {
      tft.fillRect(0, 30, 128, 128, BLACK);
      prevStatus = lcdStatus;
    }
    tft.setTextColor(GREEN, BLACK);
    tft.setCursor(33, 45);
    tft.println(PMA);
    tft.setTextSize(1);
    tft.setCursor(95, 85);
    tft.print("ug/m");
    tft.setTextSize(1);
    tft.setCursor(120, 80);
    tft.print("3");
    tft.setTextSize(2);
    tft.setCursor(20, 98);
    tft.println("Healthy");
    tft.setCursor(28, 100);

  }
  else if (PMA > 50 && PMA <= 99) {
    lcdStatus = 2 ;
    if (lcdStatus != prevStatus) {
      tft.fillRect(0, 30, 128, 128, BLACK);
      prevStatus = lcdStatus;
    }
    tft.setTextColor(CYAN, BLACK);
    tft.setCursor(33, 50);
    tft.println(PMA);
    tft.setTextSize(1);
    tft.setCursor(95, 85);
    tft.print("ug/m");
    tft.setTextSize(1);
    tft.setCursor(120, 80);
    tft.print("3");
    tft.setTextSize(2);
    tft.setCursor(15, 100);
    tft.println("Moderate");
    tft.setCursor(28, 100);
  }
  else if (PMA >= 100 && PMA <= 200) {
    lcdStatus = 3 ;
    if (lcdStatus != prevStatus) {
      tft.fillRect(0, 30, 128, 128, BLACK);
      prevStatus = lcdStatus;
    }
    tft.setTextColor(YELLOW, BLACK);
    tft.setCursor(20, 50);
    tft.println(PMA);
    tft.setTextSize(1);
    tft.setCursor(95, 85);
    tft.print("ug/m");
    tft.setTextSize(1);
    tft.setCursor(120, 80);
    tft.print("3");
    tft.setCursor(28, 90);
    tft.println();
    tft.setTextSize(2);
    tft.setCursor(15, 98);
    tft.println("  Bad");
    tft.setCursor(28, 100);

  }
  else if ( PMA >= 200 && PMA <= 999) {
    lcdStatus = 4 ;
    if (lcdStatus != prevStatus) {
      tft.fillRect(0, 30, 128, 128, BLACK);
      prevStatus = lcdStatus;
    }
    tft.setTextColor(RED, BLACK);
    tft.println(PMA);
    tft.setTextSize(1);
    tft.setCursor(95, 85);
    tft.print("ug/m");
    tft.setTextSize(1);
    tft.setCursor(120, 80);
    tft.print("3");
    tft.setTextSize(2);
    tft.setCursor(15, 98);
    tft.println("Very Bad");
    tft.setCursor(28, 100);
  }
  else {
    lcdStatus = 5 ;
    if (lcdStatus != prevStatus) {
      tft.fillRect(0, 30, 128, 128, BLACK);
      prevStatus = lcdStatus;
    }
    tft.setTextColor(RED, BLACK);
    tft.println("999");
    tft.setTextSize(1);
    tft.setCursor(95, 85);
    tft.print("ug/m");
    tft.setTextSize(1);
    tft.setCursor(120, 80);
    tft.print("3");
    tft.setTextSize(2);
    tft.setCursor(15, 98);
    tft.println("Very Bad");
    tft.setCursor(28, 100);
  }

}

